{"version":3,"sources":["Context/WeatherContext.tsx","styles/theme.ts","styles/GlobalStyles.tsx","requests/index.ts","components/Temperature/styles.ts","hooks/useGetWeather.ts","components/SearchView/styles.ts","components/SearchView/index.tsx","components/Temperature/Temperature.tsx","components/WeatherView/styles.ts","components/WeatherView/index.tsx","App.tsx","index.tsx"],"names":["statusOfWeatherView","theme","colors","creme","darkBlue","GlobalStyle","createGlobalStyle","GlobalStyleProvider","children","getWeather","cityName","a","process","fetch","response","json","Error","tempStatuses","defaultContext","status","default","data","changeStatus","setData","WeatherContext","React","createContext","WeatherContextProvider","useState","state","setState","contextState","prev","Provider","value","useGetWeather","useContext","getCityNameDebounce","useCallback","debounce","event","target","then","cod","notFoundCity","passed","catch","err","error","console","Title","styled","h2","defaultStyleOfTextSearch","css","SearchInputWrapper","div","SearchInput","input","SearchView","type","placeholder","onChange","MainWrapper","p","tempStatus","hot","cool","Temperature","temp","tempCelsius","Math","floor","cold","article","CityName","h3","WeatherStatus","DetailsGrid","DetailsTitle","DetailsContent","Image","img","WeatherView","src","weather","icon","main","style","position","zIndex","name","description","humidity","pressure","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b47f961.chunk.js","sourcesContent":["import React, { ReactElement, useState } from 'react';\r\nimport PropTypes, { element } from 'prop-types';\r\n\r\nexport enum statusOfWeatherView {\r\n  default,\r\n  passed,\r\n  notFoundCity,\r\n  error,\r\n}\r\n\r\nconst defaultContext = {\r\n  status: statusOfWeatherView.default,\r\n  data: null,\r\n  changeStatus: (status: statusOfWeatherView) => null,\r\n  setData: (data: any) => null,\r\n};\r\n\r\nexport const WeatherContext = React.createContext<{\r\n  data: any;\r\n  status: statusOfWeatherView;\r\n  changeStatus: any;\r\n  setData: any;\r\n}>(defaultContext);\r\n\r\nexport const WeatherContextProvider = ({\r\n  children,\r\n}: {\r\n  children: ReactElement;\r\n}): ReactElement => {\r\n  const [state, setState] = useState(defaultContext);\r\n\r\n  const changeStatus = (status: statusOfWeatherView) =>\r\n    setState((prev) => ({ ...prev, status }));\r\n\r\n  const setData = (data: any): any => setState((prev) => ({ ...prev, data }));\r\n\r\n  const contextState = {\r\n    ...state,\r\n    changeStatus,\r\n    setData,\r\n  };\r\n\r\n  return (\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    <WeatherContext.Provider value={contextState}>\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  );\r\n};\r\n\r\nWeatherContextProvider.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.arrayOf(element), element])\r\n    .isRequired,\r\n};\r\n","export const theme = {\r\n  colors: {\r\n    creme: '#F9F7EE',\r\n    darkBlue: '#293443',\r\n  },\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\r\nimport PropTypes, { element } from 'prop-types';\r\n\r\nimport { theme } from './theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  \r\n  @font-face{\r\n    font-family: 'Roboto', sans-serif;\r\n    src: url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500&display=swap');\r\n  }\r\n\r\n  *, *::after, *::before{\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n  }\r\n\r\n  body{\r\n    font-size: 1.6rem;\r\n    margin: 0;\r\n    font-family: 'Roboto', sans-serif;\r\n  }\r\n`;\r\n\r\nconst GlobalStyleProvider = ({\r\n  children,\r\n}: {\r\n  children: ReactElement;\r\n}): ReactElement => (\r\n  <>\r\n    <GlobalStyle />\r\n    <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n  </>\r\n);\r\n\r\nGlobalStyleProvider.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.arrayOf(element), element])\r\n    .isRequired,\r\n};\r\n\r\nexport default GlobalStyleProvider;\r\n","export const getWeather = async <T>(cityName: string): Promise<T> => {\r\n  try {\r\n    const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}&lang=PL`\r\n    );\r\n    return await response.json();\r\n  } catch (err: any) {\r\n    throw new Error(err);\r\n  }\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport enum tempStatuses {\r\n  hot,\r\n  cool,\r\n  cold,\r\n}\r\n\r\nexport const MainWrapper = styled.p`\r\n  font-size: 48px;\r\n  font-family: 'M PLUS Rounded 1c', sans-serif;\r\n  position: absolute;\r\n  top: -105px;\r\n  right: -35%;\r\n  font-weight: 900;\r\n\r\n  ${({ tempStatus }: { tempStatus: tempStatuses }) => {\r\n    switch (tempStatus) {\r\n      case tempStatuses.hot:\r\n        return css`\r\n          color: #ea3710;\r\n        `;\r\n      case tempStatuses.cool:\r\n        return css`\r\n          color: #e3ac58;\r\n        `;\r\n      default:\r\n        return css`\r\n          color: #455eb9;\r\n        `;\r\n    }\r\n  }}\r\n`;\r\n","import { useCallback, useContext } from 'react';\r\nimport debounce from 'lodash/debounce';\r\n\r\nimport { getWeather } from 'requests';\r\n\r\nimport { statusOfWeatherView, WeatherContext } from 'Context/WeatherContext';\r\n\r\ntype getWeatherDataTypes = {\r\n  name: string;\r\n  cod: string | number;\r\n  weather: Array<{ description: string; icon: string }>;\r\n  main: {\r\n    temp: number;\r\n    humidity: number;\r\n    pressure: number;\r\n  };\r\n};\r\n\r\nconst useGetWeather = (): any => {\r\n  const { changeStatus, setData } = useContext(WeatherContext);\r\n\r\n  const getCityName = (event: any) => {\r\n    changeStatus(statusOfWeatherView.default);\r\n    if (event.target.value) {\r\n      getWeather<getWeatherDataTypes>(event.target.value)\r\n        .then((data) => {\r\n          if (data.cod === '404') {\r\n            changeStatus(statusOfWeatherView.notFoundCity);\r\n          } else if (data.cod === 200) {\r\n            setData(data);\r\n            changeStatus(statusOfWeatherView.passed);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          changeStatus(statusOfWeatherView.error);\r\n          console.error(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const getCityNameDebounce = useCallback(debounce(getCityName, 300), []);\r\n\r\n  return {\r\n    getCityNameDebounce,\r\n  };\r\n};\r\n\r\nexport default useGetWeather;\r\n","import styled, { css } from 'styled-components';\r\n\r\nimport { statusOfWeatherView } from 'Context/WeatherContext';\r\n\r\nexport const Title = styled.h2`\r\n  color: ${({ theme }) => theme.colors.darkBlue};\r\n  font-weight: bold;\r\n  font-family: 'M PLUS Rounded 1c', sans-serif;\r\n  font-size: 36px;\r\n`;\r\n\r\nconst defaultStyleOfTextSearch = css`\r\n  ::after {\r\n    width: 100%;\r\n    text-align: center;\r\n    content: 'Nie znaleziono miasta';\r\n    position: absolute;\r\n    top: calc(100% + 25px);\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    color: #979797;\r\n    font-size: 14px;\r\n    font-family: 'M PLUS Rounded 1c', sans-serif;\r\n`;\r\n\r\nexport const SearchInputWrapper = styled.div`\r\n  position: relative;\r\n\r\n  ::before {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 2px;\r\n    background: ${({ theme }) => theme.colors.darkBlue};\r\n    transform-origin: center;\r\n    transition: transform 0.2s;\r\n  }\r\n\r\n  ${({ status }: { status?: statusOfWeatherView }) => {\r\n    if (status === statusOfWeatherView.notFoundCity) {\r\n      return css`\r\n        ${defaultStyleOfTextSearch};\r\n      `;\r\n    } else if (status === statusOfWeatherView.error) {\r\n      return css`\r\n        ${defaultStyleOfTextSearch};\r\n        content: 'Nieoczekiwany błąd! Odśwież stronę.';\r\n        color: red;\r\n      `;\r\n    } else if (status === statusOfWeatherView.passed) {\r\n      return css`\r\n        position: absolute;\r\n        top: 20px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n\r\n        ::before {\r\n          transform: scaleX(0.2);\r\n        }\r\n\r\n        ::after {\r\n          width: 100%;\r\n          text-align: center;\r\n          content: 'zmień miasto';\r\n          position: absolute;\r\n          bottom: 70%;\r\n          left: 50%;\r\n          transform: translateX(-50%);\r\n          color: #979797;\r\n          font-size: 14px;\r\n          font-family: 'M PLUS Rounded 1c', sans-serif;\r\n        }\r\n      `;\r\n    }\r\n  }}\r\n`;\r\n\r\nexport const SearchInput = styled.input`\r\n  width: 210px;\r\n  border: none;\r\n  background: none;\r\n  margin-top: 30px;\r\n  font-size: 24px;\r\n  font-family: 'M PLUS Rounded 1c', sans-serif;\r\n  color: ${({ theme }) => theme.colors.darkBlue};\r\n  text-align: center;\r\n  padding: 10px 0;\r\n  font-stretch: condensed;\r\n\r\n  ::placeholder {\r\n    color: #c0c0c0;\r\n  }\r\n\r\n  :focus {\r\n    outline: 0;\r\n    background: #f4efd8;\r\n  }\r\n`;\r\n","import React, { ReactElement, useContext } from 'react';\r\n\r\nimport useGetWeather from 'hooks/useGetWeather';\r\nimport { statusOfWeatherView, WeatherContext } from 'Context/WeatherContext';\r\n\r\nimport { SearchInput, SearchInputWrapper, Title } from './styles';\r\n\r\nconst SearchView = (): ReactElement => {\r\n  const { getCityNameDebounce } = useGetWeather();\r\n\r\n  const { status } = useContext(WeatherContext);\r\n\r\n  return (\r\n    <>\r\n      {status !== statusOfWeatherView.passed && <Title>Weather app</Title>}\r\n      <SearchInputWrapper status={status}>\r\n        <SearchInput\r\n          type=\"text\"\r\n          placeholder=\"miasto\"\r\n          onChange={getCityNameDebounce}\r\n        />\r\n      </SearchInputWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchView;\r\n","import React, { ReactElement } from 'react';\r\n\r\nimport { MainWrapper, tempStatuses } from './styles';\r\n\r\nconst Temperature = ({ temp }: { temp: number }): ReactElement => {\r\n  const tempCelsius = Math.floor(temp - 273);\r\n\r\n  const tempStatus =\r\n    tempCelsius < 12\r\n      ? tempStatuses.cold\r\n      : tempCelsius < 25\r\n      ? tempStatuses.cool\r\n      : tempStatuses.hot;\r\n\r\n  return <MainWrapper tempStatus={tempStatus}>{tempCelsius}℃</MainWrapper>;\r\n};\r\n\r\nexport default Temperature;\r\n","import styled from 'styled-components';\r\n\r\nexport const MainWrapper = styled.article`\r\n  position: relative;\r\n  left: -20px;\r\n`;\r\n\r\nexport const CityName = styled.h3`\r\n  font-size: 48px;\r\n  font-family: 'M PLUS Rounded 1c', sans-serif;\r\n  margin: 0;\r\n`;\r\n\r\nexport const WeatherStatus = styled.p`\r\n  font-size: 18px;\r\n  margin: 0 0 43px;\r\n`;\r\n\r\nexport const DetailsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n`;\r\n\r\nexport const DetailsTitle = styled.p`\r\n  margin: 8px 0 0 0;\r\n  font-size: 14px;\r\n  width: max-content;\r\n`;\r\n\r\nexport const DetailsContent = styled.p`\r\n  font-weight: 700;\r\n  margin: 8px 0 0 0;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  position: absolute;\r\n  left: 90%;\r\n  top: 5%;\r\n  transform-origin: center;\r\n  transform: scale(1.1);\r\n`;\r\n","import React, { ReactElement, useContext } from 'react';\r\n\r\nimport { statusOfWeatherView, WeatherContext } from 'Context/WeatherContext';\r\nimport Temperature from 'components/Temperature/Temperature';\r\n\r\nimport {\r\n  MainWrapper,\r\n  DetailsTitle,\r\n  DetailsContent,\r\n  WeatherStatus,\r\n  CityName,\r\n  DetailsGrid,\r\n  Image,\r\n} from './styles';\r\n\r\nconst WeatherView = (): ReactElement => {\r\n  const { status, data } = useContext(WeatherContext);\r\n\r\n  if (status === statusOfWeatherView.passed && data !== null) {\r\n    return (\r\n      <MainWrapper>\r\n        <Image\r\n          src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n        />\r\n        <Temperature temp={data.main.temp} />\r\n        <div style={{ position: 'relative', zIndex: 20 }}>\r\n          <CityName>{data.name}</CityName>\r\n          <WeatherStatus>{data.weather[0].description}</WeatherStatus>\r\n          <DetailsGrid>\r\n            <DetailsTitle>Wilgotność:</DetailsTitle>\r\n            <DetailsContent>{data.main.humidity}%</DetailsContent>\r\n            <DetailsTitle>Ciśnienie:</DetailsTitle>\r\n            <DetailsContent>{data.main.pressure}pHa</DetailsContent>\r\n          </DetailsGrid>\r\n        </div>\r\n      </MainWrapper>\r\n    );\r\n  }\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default WeatherView;\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport GlobalStyleProvider from 'styles/GlobalStyles';\r\nimport SearchView from 'components/SearchView';\r\nimport { WeatherContextProvider } from 'Context/WeatherContext';\r\n\r\nimport 'style.css';\r\nimport WeatherView from './components/WeatherView';\r\n\r\nconst MainWrapper = styled.main`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: ${({ theme }) => theme.colors.creme};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst App = (): ReactElement => (\r\n  <GlobalStyleProvider>\r\n    <WeatherContextProvider>\r\n      <MainWrapper>\r\n        <SearchView />\r\n        <WeatherView />\r\n      </MainWrapper>\r\n    </WeatherContextProvider>\r\n  </GlobalStyleProvider>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}